//////////////////////////////////////////////////////
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?
//////////////////////////////////////////////////////

const EXAMPLE_TRIANGLE = 5;
const TRIANGLE_RESULT  = 28;

function findTriangleForDivisors( number )
{
	let found    = false;
	let natural  = 1;
	let triangle = 0;
	let divisors = [];

	while (found === false)
	{
		triangle += natural;
		divisors = [ triangle ];

		for (let i = 1; i <= ((triangle / 2) | 0); i += 1)
		{
			if (triangle % i === 0) divisors.push( i )
			if (divisors.length >= number) return triangle;
		}

		natural += 1;
	}
}

let result = findTriangleForDivisors( EXAMPLE_TRIANGLE )
console.assert( result === TRIANGLE_RESULT, result, TRIANGLE_RESULT );

result = findTriangleForDivisors( 500 );
console.log( result, 'result' );
